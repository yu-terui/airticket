<!DOCTYPE html>
<html lang="ja">
    <head>
        <meta charset="UTF-8">
        <title>EC Store - 商品一覧</title>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.4.0/css/bootstrap-reboot.min.css">
        <link type="text/css" rel="stylesheet" href="../assets/css/style.css">
    </head>
    <body>
        <header>
            <ul>
                <li><a href="/"><img src="../assets/img/アイコン_花.png" alt="アイコン_花"></a></li>
                <li><a href="/register"><img src="../assets/img/アイコン_ユーザー.png" alt="アイコン_ユーザー"></a></li>
                <li><a href="/cart"><img src="../assets/img/アイコン_カート.png" alt="アイコン_カート"></a></li>
                <li><a href="/login"><img src="../assets/img/アイコン_管理画面.png" alt="アイコン_管理画面"></a></li>
            </ul>
        </header>
        <main>
            <div class="container">
                <h1>航空券</h1>
                <div id="catalog">
                    <select id="sortSelect">
                        <option value="base" selected>商品名順</option>
                        <option value="desc">価格の高い順</option>
                        <option value="asc">価格の低い順</option>
                        <option value="review_desc">レビューの評価順</option>
                        <option value="review_total">レビューの多い順</option>
                    </select>
                    <div class="grid"></div>
                </div>
            </div>
        </main>
        <footer>
            <div class="container">
                <small>Copyright &copy; 2024 EBA All rights reserved.</small>
            </div>
        </footer>
        <script type="text/javascript">
            const products = JSON.parse('<%= JSON.stringify(products) %>'.replace(/&#34;/g, '"'));
            //ページ読み込み時は初期値を出力
            window.onload = () => {
                createTableData(products);
                // // // データベースproductsにavg・totalプロパティを追加
                let avgNum = document.querySelectorAll(".avgNum")
                function addAvgTotal(A, B, C) {
                    for (let i = 0; i < avgNum.length; i++) {
                        products[A].avg = avgNum[B].textContent;
                    }
                    let itemC = products.filter((products) => products.itemId == C)
                    const evaluationC = itemC.map((e) => e.evaluation);
                    const totalC = evaluationC.length;
                    products[A].total = totalC;
                }
                // //アジサイ
                addAvgTotal(0, 0, 1)
                addAvgTotal(1, 0, 1)
                // //アネモネ
                addAvgTotal(2, 1, 2)
                addAvgTotal(3, 1, 2)
                addAvgTotal(4, 1, 2)
                addAvgTotal(5, 1, 2)
                // //カスミソウ
                addAvgTotal(6, 2, 3)
                addAvgTotal(7, 2, 3)
                // //カーネーション
                addAvgTotal(8, 3, 4)
                addAvgTotal(9, 3, 4)
                // //ガーベラ
                addAvgTotal(11, 4, 5)
                addAvgTotal(12, 4, 5)
                // //キク
                addAvgTotal(13, 5, 6)
                addAvgTotal(14, 5, 6)
                addAvgTotal(15, 5, 6)
                addAvgTotal(16, 5, 6)
                addAvgTotal(17, 5, 6)
                addAvgTotal(18, 5, 6)
                // //チューリップ
                addAvgTotal(19, 6, 7)
                addAvgTotal(20, 6, 7)
                // //バラ
                addAvgTotal(21, 7, 8)
                addAvgTotal(22, 7, 8)
                // //ヒマワリ
                addAvgTotal(23, 8, 9)
                addAvgTotal(24, 8, 9)
                addAvgTotal(25, 8, 9)
                addAvgTotal(26, 8, 9)
                // //ユリ
                addAvgTotal(27, 9, 10)
                addAvgTotal(28, 9, 10)
                addAvgTotal(29, 9, 10)
            }
            function createTableData() {
                //デフォルトをリセット
                const grid = document.querySelector(".grid");
                while (grid.firstChild) {
                    grid.removeChild(grid.firstChild);
                }
                //重複したデータをフィルタリング
                const dataFiltered =
                    products.filter((val, i, self) => self.findIndex(
                        (productsElement) => productsElement.name === val.name) === i);
                //商品情報表示領域の作成
                dataFiltered.map((data) => {
                    //タグの生成
                    const item = document.createElement("div");
                    const productImgParag = document.createElement("p");
                    const productImgAnchor = document.createElement("a");
                    const productImg = document.createElement("img");
                    const productName = document.createElement("p");
                    const productPrice = document.createElement("p");
                    const rateWrap = document.createElement("p");
                    const avgNum = document.createElement("span");
                    const rateStar = document.createElement("span");
                    const total = document.createElement("span");
                    //各要素へ属性の付与
                    item.classList.add("item")
                    productImgAnchor.setAttribute("href", `/products/${data.name}`);
                    productName.classList.add("productName")
                    productPrice.classList.add("productPrice")
                    rateWrap.classList.add("rateWrap")
                    avgNum.classList.add("avgNum")
                    rateStar.classList.add("rateStar")
                    total.classList.add("total")
                    //商品情報を受け取る
                    productImg.setAttribute('src', `../assets/img/${data.image}`)
                    productName.innerHTML = `商品名：${data.name}`
                    productPrice.innerHTML = `(税込${data.price}円)`
                    //商品情報表示領域の完成
                    productImgParag.append(productImgAnchor)
                    productImgAnchor.append(productImg)
                    item.append(productImgParag)
                    item.append(productName)
                    item.append(productPrice)
                    //ブラウザに出力
                    grid.append(item)
                    //平均値とレビュー総数の挿入
                    function insert(X) {
                        //itemIdごとの新しい配列
                        let itemX = products.filter((products) => products.itemId == X)
                        //評価値のみを取り出す
                        const evaluationX = itemX.map((e) => e.evaluation);
                        //評価値から平均値を計算
                        const avgX = evaluationX.reduce((a, b) => a + b) / evaluationX.length;
                        const totalX = evaluationX.length;
                        total.innerHTML = `評価（${totalX}件）：`;
                        avgNum.innerHTML = Math.floor(avgX * 100) / 100;
                        item.appendChild(rateWrap)
                    }
                    function rateStarStyle(Y) {
                        rateStar.setAttribute("style", Y)
                        rateWrap.appendChild(total)
                        rateWrap.appendChild(avgNum)
                        rateWrap.appendChild(rateStar)
                    }
                    //値に応じた写真・平均値・総数の挿入
                    if (data.name == 'アジサイ') {
                        insert(1)
                        rateStarStyle("--score:2.5")
                    }
                    if (data.name == 'アネモネ') {
                        insert(2)
                        rateStarStyle("--score:3.25")
                    }
                    if (data.name == 'カスミソウ') {
                        insert(3)
                        rateStarStyle("--score:3.5")
                    }
                    if (data.name == 'カーネーション') {
                        insert(4)
                        rateStarStyle("--score:3.33")
                    }
                    if (data.name == 'ガーベラ') {
                        insert(5)
                        rateStarStyle("--score:4.5")
                    }
                    if (data.name == 'キク') {
                        insert(6)
                        rateStarStyle("--score:3.5")
                    }
                    if (data.name == 'チューリップ') {
                        insert(7)
                        rateStarStyle("--score:4.5")
                    }
                    if (data.name == 'バラ') {
                        insert(8)
                        rateStarStyle("--score:2.5")
                    }
                    if (data.name == 'ヒマワリ') {
                        insert(9)
                        rateStarStyle("--score:3.5")
                    }
                    if (data.name == 'ユリ') {
                        insert(10)
                        rateStarStyle("--score:3.66")
                    }
                });
            };
            //ソート機能
            sortSelect = document.querySelector("#sortSelect")
            sortSelect.addEventListener("change", function () {
                if (event.target.value == 'base') {
                    products.sort((a, b) => {
                        return a.name.localeCompare(b.name, "ja");
                    });
                    createTableData();
                } else if (event.target.value == 'desc') {
                    products.sort((a, b) => b.price - a.price);
                    createTableData();
                } else if (event.target.value == 'asc') {
                    products.sort((a, b) => a.price - b.price);
                    createTableData();
                }
                else if (event.target.value == 'review_desc') {
                    products.sort((a, b) => b.avg - a.avg);
                    createTableData();
                }
                else if (event.target.value == 'review_total') {
                    products.sort((a, b) => b.total - a.total);
                    createTableData();
                }
            });
        </script>
    </body>
</html>
